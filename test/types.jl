# src/types.jl
using Dates

"""
Module containing font-related constants
"""
module FontConstants
    # Basic font limitations
    const MAX_GLYPHS = 65535            # Maximum glyphs in a single font
    const MIN_EM_SQUARE = 16            # Minimum EM square size
    const MAX_EM_SQUARE = 16384         # Maximum EM square size
    const DEFAULT_EM_SQUARE = 1000      # Default EM square size

    # Table size limitations
    const MAX_TABLE_SIZE = 1024 * 1024 * 16     # 16MB per table
    const MAX_TOTAL_SIZE = 1024 * 1024 * 32     # 32MB total font size
    const MAX_NAME_LENGTH = 63                   # Maximum name length
    const MAX_CMAP_SEGMENTS = 65535             # Maximum CMAP segments

    # Metric limitations
    const MIN_BEARING = -16384          # Minimum bearing value
    const MAX_BEARING = 16384           # Maximum bearing value
    const MAX_ADVANCE = 16384           # Maximum advance value
    
    # Version information
    const FONT_VERSION = v"1.0.0"       # Font version
    const TTF_VERSION = 0x00010000      # TTF version (1.0)
    
    # Unicode ranges
    const UNICODE_PUA_START = 0xE000    # Start of Private Use Area
    const UNICODE_PUA_END = 0xF8FF      # End of Private Use Area
end

"""
Base error type for font-related errors
"""
abstract type FontError <: Exception end

"""
Error for invalid EM square values
"""
struct EmSquareError <: FontError
    value::Int
    message::String
end

"""
Error for invalid metrics values
"""
struct MetricsError <: FontError
    message::String
end

"""
Error for glyph-related issues
"""
struct GlyphError <: FontError
    message::String
end

"""
Font metadata structure with validation
"""
struct FontMetadata
    name::String
    version::String
    copyright::String
    em_square::Int
    creation_time::DateTime
    modification_time::DateTime

    function FontMetadata(
        name::String,
        version::String = string(FontConstants.FONT_VERSION),
        copyright::String = "Generated by Yethangle.jl",
        em_square::Int = FontConstants.DEFAULT_EM_SQUARE,
        creation_time::DateTime = now(),
        modification_time::DateTime = now()
    )
        # Validate name length
        if length(name) > FontConstants.MAX_NAME_LENGTH
            throw(ArgumentError("Font name too long: max $(FontConstants.MAX_NAME_LENGTH) characters"))
        end

        # Validate em_square
        if em_square < FontConstants.MIN_EM_SQUARE || em_square > FontConstants.MAX_EM_SQUARE
            throw(EmSquareError(em_square, 
                "EM square must be between $(FontConstants.MIN_EM_SQUARE) and $(FontConstants.MAX_EM_SQUARE)"))
        end

        # Validate version string
        try
            VersionNumber(version)
        catch
            throw(ArgumentError("Invalid version string: $version"))
        end

        new(name, version, copyright, em_square, creation_time, modification_time)
    end
end

"""
Glyph metrics with validation
"""
struct GlyphMetrics
    width::Int16
    height::Int16
    horiBearingX::Int16
    horiBearingY::Int16
    horiAdvance::UInt16
    vertBearingX::Int16
    vertBearingY::Int16
    vertAdvance::UInt16

    function GlyphMetrics(
        width::Integer,
        height::Integer,
        horiBearingX::Integer,
        horiBearingY::Integer,
        horiAdvance::Integer,
        vertBearingX::Integer,
        vertBearingY::Integer,
        vertAdvance::Integer
    )
        # Validate dimensions
        if width <= 0 || height <= 0
            throw(MetricsError("Width and height must be positive"))
        end

        # Validate bearings
        for (name, value) in [
            ("horiBearingX", horiBearingX),
            ("horiBearingY", horiBearingY),
            ("vertBearingX", vertBearingX),
            ("vertBearingY", vertBearingY)
        ]
            if value < FontConstants.MIN_BEARING || value > FontConstants.MAX_BEARING
                throw(MetricsError("$name must be between $(FontConstants.MIN_BEARING) and $(FontConstants.MAX_BEARING)"))
            end
        end

        # Validate advances
        for (name, value) in [("horiAdvance", horiAdvance), ("vertAdvance", vertAdvance)]
            if value > FontConstants.MAX_ADVANCE
                throw(MetricsError("$name must not exceed $(FontConstants.MAX_ADVANCE)"))
            end
        end

        new(
            Int16(width),
            Int16(height),
            Int16(horiBearingX),
            Int16(horiBearingY),
            UInt16(horiAdvance),
            Int16(vertBearingX),
            Int16(vertBearingY),
            UInt16(vertAdvance)
        )
    end
end

"""
Glyph outline with validation
Points are tuples of (x, y, on_curve)
"""
struct GlyphOutline
    contours::Vector{Vector{Tuple{Int16, Int16, Bool}}}
    xmin::Int16
    ymin::Int16
    xmax::Int16
    ymax::Int16

    function GlyphOutline(
        contours::Vector{Vector{Tuple{Int16, Int16, Bool}}},
        xmin::Integer,
        ymin::Integer,
        xmax::Integer,
        ymax::Integer
    )
        # Validate contours
        if isempty(contours)
            throw(GlyphError("Outline must have at least one contour"))
        end

        for (i, contour) in enumerate(contours)
            if isempty(contour)
                throw(GlyphError("Contour $i is empty"))
            end
        end

        # Validate bounds
        if xmax < xmin || ymax < ymin
            throw(GlyphError("Invalid bounding box: xmin=$xmin, xmax=$xmax, ymin=$ymin, ymax=$ymax"))
        end

        # Verify points are within bounds
        for (i, contour) in enumerate(contours)
            for (j, (x, y, _)) in enumerate(contour)
                if x < xmin || x > xmax || y < ymin || y > ymax
                    throw(GlyphError("Point $j in contour $i ($x,$y) is outside bounds"))
                end
            end
        end

        new(contours, Int16(xmin), Int16(ymin), Int16(xmax), Int16(ymax))
    end
end

"""
Glyph structure with validation
"""
struct Glyph
    metrics::GlyphMetrics
    outline::GlyphOutline

    function Glyph(metrics::GlyphMetrics, outline::GlyphOutline)
        # Validate metrics against outline
        if metrics.width < (outline.xmax - outline.xmin) ||
           metrics.height < (outline.ymax - outline.ymin)
            throw(GlyphError("Metrics dimensions smaller than outline bounds"))
        end

        new(metrics, outline)
    end
end

"""
TTFont data structure
"""
mutable struct TTFont
    tables::Dict{String, Vector{UInt8}}
    num_glyphs::Int
    locations::Vector{Int}
    total_size::Int
    
    function TTFont()
        new(Dict{String, Vector{UInt8}}(), 0, [0], 0)
    end
end

"""
YethangleFont structure with validation
"""
mutable struct YethangleFont
    metadata::FontMetadata
    glyphs::Dict{Char, Glyph}
    glyph_indices::Dict{Char, Int}
    next_glyph_id::Int

    function YethangleFont(metadata::FontMetadata)
        new(metadata, Dict{Char, Glyph}(), Dict{Char, Int}(), 1)
    end
end

"""
Add a table to TTFont with validation
"""
function add_table!(ttf::TTFont, tag::String, data::Vector{UInt8})
    # Validate tag
    if length(tag) > 4
        throw(ArgumentError("Table tag must not exceed 4 characters"))
    end

    # Validate table size
    if length(data) > FontConstants.MAX_TABLE_SIZE
        throw(ArgumentError("Table '$tag' exceeds maximum size"))
    end

    # Check total font size
    new_total = ttf.total_size + length(data)
    if new_total > FontConstants.MAX_TOTAL_SIZE
        throw(ArgumentError("Adding table would exceed maximum font size"))
    end

    # Update font
    ttf.tables[tag] = data
    ttf.total_size = new_total
end

"""
Add a glyph to YethangleFont with validation
"""
function add_glyph!(font::YethangleFont, char::Char, glyph::Glyph)
    # Check glyph limit
    if font.next_glyph_id >= FontConstants.MAX_GLYPHS
        throw(GlyphError("Maximum number of glyphs exceeded"))
    end

    # Add glyph
    font.glyphs[char] = glyph
    font.glyph_indices[char] = font.next_glyph_id
    font.next_glyph_id += 1
end

# Export types and functions
export FontMetadata, GlyphMetrics, GlyphOutline, Glyph, TTFont, YethangleFont
export FontConstants, FontError, EmSquareError, MetricsError, GlyphError
export add_table!, add_glyph!