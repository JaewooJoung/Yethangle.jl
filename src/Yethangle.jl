# src/Yethangle.jl
module Yethangle

using FreeType
using FileIO
using JSON3
using Unicode

export create_font, generate_all_combinations, save_font, load_font, generate_ttf

# Keep existing character set constants
const INITIAL_CONSONANTS = [
    'ᄀ', 'ᄁ', 'ᄂ', 'ᄃ', 'ᄄ', 'ᄅ', 'ᄆ', 'ᄇ', 'ᄈ', 'ᄉ', 'ᄊ', 'ᄋ',
    'ᄌ', 'ᄍ', 'ᄎ', 'ᄏ', 'ᄐ', 'ᄑ', 'ᄒ', 'ㆁ', 'ㆆ', 'ㅿ'
]

const VOWELS = [
    'ㅏ', 'ㅑ', 'ㅓ', 'ㅕ', 'ㅗ', 'ㅛ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅣ',
    'ㅐ', 'ㅒ', 'ㅔ', 'ㅖ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅢ',
    'ㆍ', 'ᆢ'
]

const FINAL_CONSONANTS = [
    'ᆨ', 'ᆩ', 'ᆪ', 'ᆫ', 'ᆬ', 'ᆭ', 'ᆮ', 'ᆯ', 'ᆰ', 'ᆱ', 'ᆲ', 'ᆳ', 'ᆴ',
    'ᆵ', 'ᆶ', 'ᆷ', 'ᆸ', 'ᆹ', 'ᆺ', 'ᆻ', 'ᆼ', 'ᆽ', 'ᆾ', 'ᆿ', 'ᇀ', 'ᇁ', 'ᇂ'
]

# Keep existing structs
struct GlyphMetrics
    width::Int
    height::Int
    bearing_x::Int
    bearing_y::Int
    advance::Int
end

struct Glyph
    metrics::GlyphMetrics
    bitmap::Matrix{UInt8}
end

struct FontMetadata
    name::String
    version::String
    copyright::String
    em_square::Int
end

mutable struct YethangleFont
    metadata::FontMetadata
    glyphs::Dict{Char, Glyph}
    metrics::Dict{Char, GlyphMetrics}
end

# Keep core font creation functions
function create_font(name::String="옛한글")::YethangleFont
    metadata = FontMetadata(
        name,
        "1.0",
        "Generated by Yethangle.jl",
        1000
    )
    YethangleFont(metadata, Dict(), Dict())
end

function calculate_unicode_point(initial::Char, vowel::Char, final::Union{Char, Nothing})::Int
    initial_index = findfirst(==(initial), INITIAL_CONSONANTS) - 1
    vowel_index = findfirst(==(vowel), VOWELS) - 1
    final_index = final === nothing ? 0 : findfirst(==(final), FINAL_CONSONANTS)
    
    return 0xE000 + (initial_index * 23 * 28) + (vowel_index * 28) + (final_index === nothing ? 0 : final_index)
end

function render_component!(bitmap::Matrix{UInt8}, char::Char, position::Tuple{Int, Int})
    x, y = position
    char_bitmap = zeros(UInt8, 100, 100)
    bitmap[y:y+99, x:x+99] .= char_bitmap
end

function create_syllable_glyph(initial::Char, vowel::Char, final::Union{Char, Nothing})::Glyph
    metrics = GlyphMetrics(1000, 1000, 0, 0, 1000)
    bitmap = zeros(UInt8, 1000, 1000)
    
    render_component!(bitmap, initial, (100, 800))
    render_component!(bitmap, vowel, (400, 500))
    if final !== nothing
        render_component!(bitmap, final, (250, 200))
    end
    
    Glyph(metrics, bitmap)
end

function generate_all_combinations(font::YethangleFont)
    combinations = []
    for initial in INITIAL_CONSONANTS
        for vowel in VOWELS
            push!(combinations, (initial, vowel, nothing))
            for final in FINAL_CONSONANTS
                push!(combinations, (initial, vowel, final))
            end
        end
    end
    combinations
end

# Modified TTF generation function
function generate_ttf(font::YethangleFont, output_file::String)
    println("TTF 생성 시작...")
    
    # Create TTF structure
    ttf = TTFont()
    
    # Add metadata
    add_metadata!(ttf, font.metadata)
    
    # Add glyphs
    total_glyphs = length(font.glyphs)
    for (i, (char, glyph)) in enumerate(font.glyphs)
        if i % 1000 == 0
            println("글리프 처리 중: $i / $total_glyphs ($(round(i/total_glyphs*100, digits=2))%)")
        end
        add_glyph!(ttf, char, glyph)
    end
    
    # Save TTF file
    println("TTF 파일 저장 중...")
    mkpath(dirname(output_file))
    save_ttf(ttf, output_file)
    
    println("TTF 파일이 성공적으로 생성되었습니다: $output_file")
end

# Simplified main generation function
function generate_font(font_name::String="옛한글", output_file::String="output/yethangle.ttf")
    # Create font
    font = create_font(font_name)
    
    # Generate combinations
    println("조합 생성 중...")
    combinations = generate_all_combinations(font)
    total = length(combinations)
    println("생성할 총 조합 수: $total")
    
    # Generate glyphs
    for (i, (initial, vowel, final)) in enumerate(combinations)
        if i % 1000 == 0
            println("처리 중: $i / $total ($(round(i/total*100, digits=2))%)")
        end
        
        glyph = create_syllable_glyph(initial, vowel, final)
        unicode_point = calculate_unicode_point(initial, vowel, final)
        font.glyphs[Char(unicode_point)] = glyph
    end
    
    # Generate TTF
    generate_ttf(font, output_file)
end

# Include font_utils.jl but remove installation-related functions
include("font_utils.jl")

end # module
